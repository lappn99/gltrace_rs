
use std::{env, time::Duration};

#[cfg(feature = "gpu_queries")]
use crate::gpu_query::QueryResult;

use super::TraceOutputGenerator;
use chrono::{DateTime, Utc};
use crate::types::types::{self, GLint,GLuint,GLuint64};

pub struct TraceHtmlGenerator;

impl TraceOutputGenerator for TraceHtmlGenerator {
    fn write<W: std::io::Write>(&self, dest: &mut W, trace: &crate::Trace) -> super::Result<()> {
        writeln!(dest, "<html>")?;
        self.write_head(dest)?;
        self.write_header(dest, trace)?;
        self.write_body(dest, trace)?;
        writeln!(dest, "</html>")?;
        Ok(())
    }
}

impl TraceHtmlGenerator {
    fn write_head<W: std::io::Write>(&self, dest: &mut W) -> super::Result<()> {
        writeln!(
            dest,
            r#"
            <head>
                <title>GLTrace</title>
            </head>
            <style>
                td {{
                    text-align:center;
                }}
                tr.parameter:nth-child(even) {{
                    background-color: #f2f2f2;
                }}

            </style>
        
        "#
        )?;

        Ok(())
    }
    fn write_header<W: std::io::Write>(
        &self,
        dest: &mut W,
        trace: &crate::Trace,
    ) -> super::Result<()> {
        let dt: DateTime<Utc> = trace.start_time.clone().into();
        let program_name = env::args().next().unwrap_or(String::from("Unknown"));
        writeln!(dest, "<header>")?;
        writeln!(dest,"<h1>Trace for {program}<h1>\n<h2>Generated by GLTrace</h2>\n<p>Trace start time: {time}</p>",program = program_name,time = dt.format("%+"))?;
        if let Some(last_entry) = trace.entries.iter().last() {
            if let Some(trace_end_time) = last_entry.time_end {
                writeln!(
                    dest,
                    "<p>Total trace time(CPU): <b>{} ms</b></p>",
                    trace_end_time.duration_since(trace.start_time)?.as_millis()
                )?;
                #[cfg(feature = "gpu_queries")]
                {
                    if let Some(query_object) = &trace.query_object {
                        while query_object.query_result_available().unwrap() == false {}
                        let gpu_time: GLuint64 = query_object.query_result().unwrap_or(Default::default());
                        let gpu_time: Duration = Duration::from_nanos(gpu_time);
                        writeln!(
                            dest,
                            "<p>Total trace time(GPU): <b>{} µs</b></p>",
                            gpu_time.as_micros()
                            
                        )?;
                        
                    }
                   
                }
                
            }
        }
        writeln!(dest, "</header>")?;
        Ok(())
    }

    fn write_body<W: std::io::Write>(
        &self,
        dest: &mut W,
        trace: &crate::Trace,
    ) -> super::Result<()> {
        writeln!(dest, "<body>")?;

        for entry in trace.entries.iter() {
            writeln!(dest, "<div class=\"entry\">")?;
            writeln!(
                dest,
                "<br><h3>gl{proc_name}</h3>",
                proc_name = entry.function
            )?;
            if let Some(params) = &entry.params {
                writeln!(
                    dest,
                    r#"
                    <table>
                        <tr>
                            <th>Parameter name</th>
                            <th>Parameter value</th> 
                        </tr>
                        {rows}
                    </table>
                "#,
                    rows = format!(
                        "{}",
                        params
                            .into_iter()
                            .map(|param| format!(
                                "<tr class=\"parameter\">
                        <td>{}</td>
                        <td>{:?}</td>
                        </tr>",
                                param.0, param.1
                            ))
                            .collect::<Vec<String>>()
                            .join("\n")
                    )
                )?;
            }
            if let Some(start_time) = entry.time_start {
                if let Some(end_time) = entry.time_end {
                    writeln!(
                        dest,
                        "<p>Duration(CPU): {}µs</p>",
                        end_time.duration_since(start_time)?.as_micros()
                    )?;
                }
            }

            writeln!(dest, "</div>")?;
        }

        writeln!(dest, "</body>")?;

        Ok(())
    }
}
