use std::env;

use super::TraceOutputGenerator;
use chrono::{DateTime, Utc};


pub struct TraceHtmlGenerator;

impl TraceOutputGenerator for TraceHtmlGenerator {
    fn write<W: std::io::Write>(&self, dest: &mut W, trace: &crate::Trace) -> super::Result<()> {
        writeln!(dest,"<html>")?;
        self.write_head(dest)?;
        self.write_header(dest, trace)?;
        self.write_body(dest, trace)?;
        writeln!(dest,"</html>")?;
        Ok(())
    }
    
}

impl TraceHtmlGenerator {
    fn write_head<W: std::io::Write>(&self, dest: &mut W) -> super::Result<()> {

        writeln!(dest, r#"
            <head>
                <title>GLTrace</title>
            </head>
            <style>
                td {{
                    text-align:center;
                }}
                tr.parameter:nth-child(even) {{
                    background-color: #f2f2f2;
                }}

            </style>
        
        "#)?;

        Ok(())
    }
    fn write_header<W: std::io::Write>(&self, dest: &mut W, trace: &crate::Trace) -> super::Result<()> {
        let dt: DateTime<Utc> = trace.start_time.clone().into();
        let program_name = env::args().next().unwrap_or(String::from("Unknown"));
        writeln!(dest,"<header>")?;
        writeln!(dest,"<h1>Trace for {program}<h1>\n<h2>Generated by GLTrace</h2>\n<p>Trace start time: {time}</p>",program = program_name,time = dt.format("%+"))?;
        writeln!(dest,"</header>")?;
        Ok(())
    
    }

    fn write_body<W: std::io::Write>(&self, dest: &mut W, trace: &crate::Trace) -> super::Result<()> {

        writeln!(dest,"<body>")?;

        for entry in trace.entries.iter () {
            writeln!(dest,"<div class=\"entry\">")?;
            writeln!(dest,"<br><h3>gl{proc_name}</h3>",proc_name = entry.function)?;
            if let Some(params) = &entry.params {
                writeln!(dest,r#"
                    <table>
                        <tr>
                            <th>Parameter name</th>
                            <th>Parameter value</th> 
                        </tr>
                        {rows}
                    </table>
                "#,
                rows = format!("{}",params
                    .into_iter()
                    .map(|param| format!("<tr class=\"parameter\">
                        <td>{}</td>
                        <td>{:?}</td>
                        </tr>",
                        param.0,param.1))
                    .collect::<Vec<String>>().join("\n")))?;
                
            }
            writeln!(dest,"</div>")?;
        }

        writeln!(dest,"</body>")?;

        Ok(())
    }
}





